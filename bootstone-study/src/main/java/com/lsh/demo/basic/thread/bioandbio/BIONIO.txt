https://www.cnblogs.com/lixinjie/p/a-post-about-io-clearly.html

1. IO指的就是读入/写出数据的过程，和等待读入/写出数据的过程。一旦拿到数据后就变成了数据操作了，就不是IO了。

拿网络IO来说，等待的过程就是数据从网络到网卡再到内核空间。读写的过程就是内核空间和用户空间的相互拷贝。

所以IO就包括两个过程，一个是等待数据的过程，一个是读写（拷贝）数据的过程。而且还要明白，一定不能包括操作数据的过程

2.


Blocking IO:
   BIO:同步阻塞式IO，服务器端与客户端三次握手简历连接后一个链路建立一个线程进行面向流的通信。这曾是jdk1.4前的唯一选择。在任何一端出现网络性能问题时都影响另一端，无法满足高并发高性能的需求。


　　NIO:同步非阻塞IO，以块的方式处理数据。采用多路复用Reactor模式。JDK1.4时引入。

　　AIO:异步非阻塞IO，基于unix事件驱动，不需要多路复用器对注册通道进行轮询，采用Proactor设计模式。JDK1.7时引入。

3. 区分发生在哪里

同步IO 和 异步IO，这两个概念是操作系统级别的
阻塞IO 和 非阻塞IO， 这两个概念是程序级别的


4.BIO
伪代码表示如下：

{
    // 阻塞，直到有数据
    read(socket, buffer);
    process(buffer);
}

BIO通信方式的特点：

一个线程负责连接，多线程则为每一个接入开启一个线程。
一个请求一个应答。
请求之后应答之前客户端会一直等待（阻塞）。

Java中的阻塞模式BIO，就是在java.net包中的Socket套接字的实现，Socket套接字是TCP/UDP等传输层协议的实现。

cat /proc/sys/kernel/threads-max  可以查看可以创建的线程数量
cat /proc/sys/kernel/pid_max 32768 是65536的一半
