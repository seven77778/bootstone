什么是WebSocket？看过html5的同学都知道，WebSocket protocol 是HTML5一种新的协议。
它是实现了浏览器与服务器 全双工通信(full-duplex)。
HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽并达到实时通讯。

WebSocket的出现是基于Web应用的实时性需要而产生的。这种实时的Web应用大家应该不陌生，在生活中都应该用到过，
比如新浪微博的评论、私信的通知，腾讯的WebQQ等。让我们来回顾下实时 Web 应用的窘境吧。

Ajax有一个问题，就是所有的请求都必须由客户端发起，服务端进行响应，如果服务端有最新的消息，难以即时的发送到客户端去

在WebSocket出现之前，一般通过两种方式来实现Web实时用：轮询机制和流技术；其中轮询有不同的轮询，还有一种叫Comet的长轮询。

轮询：这是最早的一种实现实时 Web 应用的方案。
客户端以一定的时间间隔向服务端发出请求，以频繁请求的方式来保持客户端和服务器端的同步。
这种同步方案的缺点是，当客户端以固定频率向服务 器发起请求的时候，服务器端的数据可能并没有更新，
这样会带来很多无谓的网络传输，所以这是一种非常低效的实时方案。

长轮询：是对定时轮询的改进和提高，目地是为了降低无效的网络传输。
当服务器端没有数据更新的时候，连接会保持一段时间周期直到数据或状态改变或者 时间过期，
通过这种机制来减少无效的客户端和服务器间的交互。
当然，如果服务端的数据变更非常频繁的话，这种机制和定时轮询比较起来没有本质上的性能的提高。

流：常就是在客户端的页面使用一个隐藏的窗口向服务端发出一个长连接的请求。
服务器端接到这个请求后作出回应并不断更新连接状态以保证客户端和服务器端的连接不过期。
通过这种机制可以将服务器端的信息源源不断地推向客户端。
这种机制在用户体验上有一点问题，需要针对不同的浏览器设计不同的方案来改进用户体验，
同时这种机制在并发比较大的情况下，对服务器端的资源是一个极大的考验。

总结：轮询 是客户端主动，流 是 服务端推送 ，上述方式其实并不是真正的实时技术，只是使用了一种技巧来实现的模拟实现。

基于上述弊端，实现Web实时应用的技术出现了，
WebSocket通过浏览器提供的API真正实现了具备像C/S架构下的桌面系统的实时通讯能力。
其原理是使用JavaScript调用浏览器的API发出一个WebSocket请求至服务器，经过一次握手，
和服务器建立了TCP通讯，因为它本质 上是一个TCP连接，所以数据传输的稳定性强和数据传输量比较小。

WebSocket 协议：
WebSocket 协议本质上是一个基于 TCP 的协议。
为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，
这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，
其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，
服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，
双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。

