## 1 Dubbo

Dubbo应用大致执行流程：
• 服务提供者启动，根据协议信息绑定到配置的IP和端口上，如果已有服务绑定过相同IP和端口的则跳过
• 注册服务信息至注册中心
• 客户端启动，根据接口和协议信息订阅注册中心中注册的服务，注册中心将存活的服务地址通知到客户端，当有服务信息变更时客户端可以通过定时通知得到变更信息
• 在客户端需要调用服务时，从内存中拿到上次通知的所有存活服务地址，根据路由信息和负载均衡机制选择最终调用的服务地址，发起调用
• 通过filter分别在客户端发送请求前和服务端接收请求后，通过异步记录一些需要的信息传递到monitor做监控或者统计

（1）客户端执行流程：
1. client一个线程调用远程接口，生成一个唯一的ID（比如一段随机字符串，UUID等），Dubbo是使用AtomicLong从0开始累计数字的
2. 将打包的方法调用信息（如调用的接口名称，方法名称，参数值列表等），和处理结果的回调对象callback，全部封装在一起，组成一个对象object
3. 向专门存放调用信息的全局ConcurrentHashMap里面put(ID, object)
4. 将ID和打包的方法调用信息封装成一对象connRequest，使用IoSession.write(connRequest)异步发送出去
5. 当前线程再使用callback的get()方法试图获取远程返回的结果，在get()内部，则使用synchronized获取回调对象callback的锁，再先检测是否已经获取到结果，如果没有，然后调用callback的wait()方法，释放callback上的锁，让当前线程处于等待状态。
6. 服务端接收到请求并处理后，将结果（此结果中包含了前面的ID，即回传）发送给客户端，客户端socket连接上专门监听消息的线程收到消息，分析结果，取到ID，再从前面的ConcurrentHashMap里面get(ID)，从而找到callback，将方法调用结果设置到callback对象里。
7. 监听线程接着使用synchronized获取回调对象callback的锁（因为前面调用过wait()，那个线程已释放callback的锁了），再notifyAll()，唤醒前面处于等待状态的线程继续执行（callback的get()方法继续执行就能拿到调用结果了），至此，整个过程结束。

 1.1 服务调用超时问题怎么解决？
 1.2 Dubbo支持哪些序列化方式？

 Hessian 序列化：是修改过的 hessian lite，默认启用
 json 序列化：使用 FastJson 库
 java 序列化：JDK 提供的序列化，性能不理想
 dubbo 序列化：未成熟的高效 java 序列化实现，不建议在生产环境使用

 1.3 Dubbo和SpringCloud的关系？
 1.4 Dubbo的架构设计？一共划分了哪些层？
 1.5 Dubbo的默认集群容错方案？
 1.6 Dubbo使用的是什么通信框架?
 1.7 Dubbo的主要应用场景？
 1.8 Dubbo服务注册与发现的流程？流程说明。
 1.9 Dubbo的集群容错方案有哪些？
 1.10 Dubbo的四大组件
 1.11 Dubbo在安全机制方面是如何解决的
 1.12 Dubbo和SpringCloud的区别？
 1.13 Dubbo支持哪些协议，每种协议的应用场景，优缺点？
 1.14 Dubbo的核心功能有哪些？
 1.15 Dubbo的注册中心集群挂掉，发布者和订阅者之间还能通信么？
 1.16 Dubbo集群的负载均衡有哪些策略
 1.17 为什么需要服务治理？
 1.18 Dubbo超时时间怎样设置？











 3 JVM

  3.1 JVM参数主要有⼏种分类
  3.2 Java中会存在内存泄漏吗，简述一下。
  3.3 Java虚拟机是如何判定两个Java类是相同的？
  3.4 Java 中都有哪些引用类型
  3.5 在 Java 中，对象什么时候可以被垃圾回收？
  3.6 StackOverflow异常有没有遇到过？一般你猜测会在什么情况下被触发？
  3.7 堆空间分哪些部分？以及如何设置各个部分？
  3.8 什么是栈帧？栈帧存储了什么？
  3.9 如何设置参数生成GC日志？
  3.10 GC 是什么？为什么要有 GC？
  3.12 使用过哪些jdk命令，并说明各个的作用是什么
  3.13 JVM运行时数据区区域分为哪⼏部分？
  3.14 是否了解类加载器双亲委派模型机制和破坏双亲委派模型？
  3.15 逃逸分析有几种类型？
  3.16 -Xms这些参数的含义是什么？
  3.17 你知道哪几种垃圾收集器,各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。
  3.18 JVM的内存结构，Eden和Survivor比例是多少？



















 ## 4 多线程/高并发

  4.1 负载平衡的意义什么？
  4.2 请说出同步线程及线程调度相关的方法？
  4.3 关于epoll和select的区别，哪些说法 是正确的？（多选）
 A. epoll 和 select 都是 I/O 多路复用的技术，都可以实现同时监听 多个I/O事件的状态。
 B. epoll 相比 select 效率更高，主要是基于其操作系统支持的 I/O 事件通知机制，而select是基于轮询机制。
 C. epoll支持水平触发和边沿触发两种模式。
 D. select能并行支持I/O比较小，且无法修改。
  4.4 启动一个线程是调用run()方法还是start()方法？
  4.5 如何确保N个线程可以访问N个资源同时又不导致死锁？
  4.6 编写多线程程序的几种实现方式（换个问法：创建多线程的方式）？
  4.7 线程和进程的区别？
  4.8 什么是线程池，有哪些常用线程池？
  4.9 什么是死锁？
  4.10 怎么保证缓存和数据库数据的一致性？
 ## 5 消息中间件

  5.1 消费者获取消息有几种模式？
  5.2 RocketMQ的特点有哪些？
  5.3 kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka将如何处理？
  5.4 为何需要Kafka集群
  5.5 Kafka 数据存储设计
  5.6 Kafka如何判断一个节点是否存活？
  5.7 kafka消息发送的可靠性机制有几种
  5.8 请详细说一下推送模式和拉取模式。
  5.9 Kafka 与传统消息系统之间有三个关键区别
  5.10 RocketMQ 由哪些角色组成？
  5.12 Kafka的消费者如何消费数据
  5.13 Kafka的优点
  5.14 Kafka 的设计是什么样的呢？
  5.15 说说你对Consumer的了解？
  5.16 Kafka新建的分区会在哪个目录下创建
  5.17 说一下Kafka消费者消费过程
  5.18 介绍下Kafka
  5.19 什么情况会导致Kafka运行变慢？