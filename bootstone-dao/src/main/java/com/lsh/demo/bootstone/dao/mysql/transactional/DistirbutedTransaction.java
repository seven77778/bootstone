package com.lsh.demo.bootstone.dao.mysql.transactional;

/**
 * 分布式事务 分布式事务最好的解决方案是尽量避免出现分布式事务
 *
 * 行内转账
 * 如用户A是杭州支行，用户B是北京支行，A向B转账10000元，那么虽然都是工行用户，但是是分布式部署的，就会涉及到跨库的分布式事务问题，一般解决方案有同步和异步两种方式：
 * 同步方式可以如下：
 * 1、创建转账订单，订单状态为待成功
 * 2、用户A扣减10000元
 * 3、发起转账请求到北京支行
 * 4、北京支行创建转账订单，订单状态为待成功
 * 5、用户B增加10000元
 * 6、北京支行订单状态改为成功并返回结果
 * 7、杭州支行接收响应结果，如果为成功则提交事务表示转账成功，如果为失败则更新订单状态为转账失败
 * 8、定时任务根据查询转账失败订单在北京支行的订单订单状态，如果失败，则回滚转账事务；如果成功则提交事务
 *
 */
public class DistirbutedTransaction {



}
